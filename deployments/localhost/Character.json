{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hunter",
          "type": "uint256"
        }
      ],
      "name": "leveled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "name",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hunter",
          "type": "uint256"
        }
      ],
      "name": "named",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hunter",
          "type": "uint256"
        }
      ],
      "name": "summoned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hunter",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "change_name",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hunter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "events_status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hunter",
          "type": "uint256"
        }
      ],
      "name": "hunter_info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_xp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "level",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hunter",
          "type": "uint256"
        }
      ],
      "name": "level_up",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minted_address",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hunter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_xp",
          "type": "uint256"
        }
      ],
      "name": "spend_xp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "xp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "curent_level",
          "type": "uint256"
        }
      ],
      "name": "xp_required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xp_to_next_level",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4534f595986236fb6bb5e8483ff39c4746b36d045537e369bc6b748f6a47222e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "3041125",
    "logsBloom": "0x
    "blockHash": "0x8159a500fe34025cce0a7e3f1b0c0aa82ee667bccfeb457d441ab637a8c0d8a8",
    "transactionHash": "0x4534f595986236fb6bb5e8483ff39c4746b36d045537e369bc6b748f6a47222e",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "3041125",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "25d416f232b23977708d629cdb851521",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hunter\",\"type\":\"uint256\"}],\"name\":\"leveled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"name\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hunter\",\"type\":\"uint256\"}],\"name\":\"named\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hunter\",\"type\":\"uint256\"}],\"name\":\"summoned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hunter\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"change_name\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hunter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"events_status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hunter\",\"type\":\"uint256\"}],\"name\":\"hunter_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hunter\",\"type\":\"uint256\"}],\"name\":\"level_up\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minted_address\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hunter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xp\",\"type\":\"uint256\"}],\"name\":\"spend_xp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"curent_level\",\"type\":\"uint256\"}],\"name\":\"xp_required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xp_to_next_level\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Character.sol\":\"Character\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/core/Character.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract Character is IERC721, ERC721URIStorage {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    //Variable\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n    mapping(address => bool) public minted_address;\\r\\n    mapping(uint => string) public name;\\r\\n    mapping(uint => uint) public level;\\r\\n    mapping(uint => uint) public xp;\\r\\n    mapping(uint => bool[10]) public events;\\r\\n\\r\\n    //Event\\r\\n    event summoned(address indexed owner, uint hunter);\\r\\n    event leveled(address indexed owner, uint level, uint hunter);\\r\\n    event named(address indexed owner, uint name, uint hunter);\\r\\n\\r\\n    constructor() ERC721(\\\"Character\\\", \\\"HUNTER\\\") {}\\r\\n\\r\\n    function summon() external {\\r\\n        require(minted_address[msg.sender] == false, \\\"Already summoned\\\");\\r\\n\\r\\n        uint _next_hunter = _tokenIdCounter.current();\\r\\n        name[_next_hunter] = Strings.toHexString(msg.sender);\\r\\n        level[_next_hunter] = 1;\\r\\n        minted_address[msg.sender] = true;\\r\\n\\r\\n        _safeMint(msg.sender, _next_hunter);\\r\\n        emit summoned(msg.sender, _next_hunter);\\r\\n        _tokenIdCounter.increment();\\r\\n    }\\r\\n\\r\\n    function level_up(uint _hunter) external {\\r\\n        require(_isApprovedOrOwner(msg.sender, _hunter));\\r\\n        uint _level = level[_hunter];\\r\\n        uint _xp_required = xp_required(_level);\\r\\n        xp[_hunter] -= _xp_required;\\r\\n        level[_hunter] = _level + 1;\\r\\n        emit leveled(msg.sender, level[_hunter], _hunter);\\r\\n    }\\r\\n\\r\\n    function change_name(uint _hunter, string memory _name) external {\\r\\n        require(_isApprovedOrOwner(msg.sender, _hunter));\\r\\n        name[_hunter] = _name;\\r\\n        emit named(msg.sender, level[_hunter], _hunter);\\r\\n    }\\r\\n\\r\\n    function spend_xp(uint _hunter, uint _xp) external {\\r\\n        require(_isApprovedOrOwner(msg.sender, _hunter));\\r\\n        xp[_hunter] -= _xp;\\r\\n    }\\r\\n\\r\\n    function xp_required(uint curent_level)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint xp_to_next_level)\\r\\n    {\\r\\n        xp_to_next_level = curent_level * 1000e18;\\r\\n        for (uint i = 1; i < curent_level; i++) {\\r\\n            xp_to_next_level += curent_level * 1000e18;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function events_status(uint _hunter, uint _index)\\r\\n        external\\r\\n        view\\r\\n        returns (bool _status)\\r\\n    {\\r\\n        _status = events[_hunter][_index];\\r\\n    }\\r\\n\\r\\n    function hunter_info(uint _hunter)\\r\\n        external\\r\\n        view\\r\\n        returns (uint _xp, uint _level)\\r\\n    {\\r\\n        _xp = xp[_hunter];\\r\\n        _level = level[_hunter];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x145de8afe8ed7f5dc2f0b79fc17f811574a09a7e90fa44bd7c593e4c763973d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600981526020017f43686172616374657200000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f48554e544552000000000000000000000000000000000000000000000000000081525081600090816200008f919062000324565b508060019081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b613534806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c80638a24bcb7116100de578063adf448d811610097578063c87b56dd11610071578063c87b56dd146104a6578063e51c4ecc146104d6578063e58410bb146104f2578063e985e9c51461050e57610172565b8063adf448d81461042a578063b88d4fde1461045a578063c220bf341461047657610172565b80638a24bcb714610344578063902494481461037457806394b69ffa1461039057806395d89b41146103c0578063a22cb465146103de578063aca10be3146103fa57610172565b806323b872dd1161013057806323b872dd14610271578063363dd19e1461028d57806342842e0e146102975780634b871dfb146102b35780636352211e146102e457806370a082311461031457610172565b8062ad800c1461017757806301ffc9a7146101a757806305c58df2146101d757806306fdde0314610207578063081812fc14610225578063095ea7b314610255575b600080fd5b610191600480360381019061018c9190612177565b61053e565b60405161019e9190612234565b60405180910390f35b6101c160048036038101906101bc91906122ae565b6105de565b6040516101ce91906122f6565b60405180910390f35b6101f160048036038101906101ec9190612177565b6106c0565b6040516101fe9190612320565b60405180910390f35b61020f6106d8565b60405161021c9190612234565b60405180910390f35b61023f600480360381019061023a9190612177565b61076a565b60405161024c919061237c565b60405180910390f35b61026f600480360381019061026a91906123c3565b6107b0565b005b61028b60048036038101906102869190612403565b6108c7565b005b610295610927565b005b6102b160048036038101906102ac9190612403565b610ac7565b005b6102cd60048036038101906102c89190612177565b610ae7565b6040516102db929190612456565b60405180910390f35b6102fe60048036038101906102f99190612177565b610b1b565b60405161030b919061237c565b60405180910390f35b61032e6004803603810190610329919061247f565b610bcc565b60405161033b9190612320565b60405180910390f35b61035e600480360381019061035991906124ac565b610c83565b60405161036b91906122f6565b60405180910390f35b61038e60048036038101906103899190612177565b610cbc565b005b6103aa60048036038101906103a59190612177565b610daa565b6040516103b79190612320565b60405180910390f35b6103c8610dc2565b6040516103d59190612234565b60405180910390f35b6103f860048036038101906103f39190612518565b610e54565b005b610414600480360381019061040f9190612177565b610e6a565b6040516104219190612320565b60405180910390f35b610444600480360381019061043f919061247f565b610ecd565b60405161045191906122f6565b60405180910390f35b610474600480360381019061046f919061268d565b610eed565b005b610490600480360381019061048b91906124ac565b610f4f565b60405161049d91906122f6565b60405180910390f35b6104c060048036038101906104bb9190612177565b610f94565b6040516104cd9190612234565b60405180910390f35b6104f060048036038101906104eb91906127b1565b6110a6565b005b61050c600480360381019061050791906124ac565b611141565b005b6105286004803603810190610523919061280d565b611182565b60405161053591906122f6565b60405180910390f35b6009602052806000526040600020600091509050805461055d9061287c565b80601f01602080910402602001604051908101604052809291908181526020018280546105899061287c565b80156105d65780601f106105ab576101008083540402835291602001916105d6565b820191906000526020600020905b8154815290600101906020018083116105b957829003601f168201915b505050505081565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106a957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106b957506106b882611216565b5b9050919050565b600a6020528060005260406000206000915090505481565b6060600080546106e79061287c565b80601f01602080910402602001604051908101604052809291908181526020018280546107139061287c565b80156107605780601f1061073557610100808354040283529160200191610760565b820191906000526020600020905b81548152906001019060200180831161074357829003601f168201915b5050505050905090565b600061077582611280565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107bb82610b1b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361082b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108229061291f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661084a6112cb565b73ffffffffffffffffffffffffffffffffffffffff1614806108795750610878816108736112cb565b611182565b5b6108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108af906129b1565b60405180910390fd5b6108c283836112d3565b505050565b6108d86108d26112cb565b8261138c565b610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e90612a43565b60405180910390fd5b610922838383611421565b505050565b60001515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190612aaf565b60405180910390fd5b60006109c66007611687565b90506109d133611695565b6009600083815260200190815260200160002090816109f09190612c7b565b506001600a6000838152602001908152602001600020819055506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a6c33826116c2565b3373ffffffffffffffffffffffffffffffffffffffff167fbbb46266402c42849573c27abc27dd180e2b8ec8f33840ca8b0919227659e39982604051610ab29190612320565b60405180910390a2610ac460076116e0565b50565b610ae283838360405180602001604052806000815250610eed565b505050565b600080600b6000848152602001908152602001600020549150600a6000848152602001908152602001600020549050915091565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba90612d99565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3390612e2b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c60205281600052604060002081600a8110610c9f57600080fd5b60209182820401919006915091509054906101000a900460ff1681565b610cc6338261138c565b610ccf57600080fd5b6000600a60008381526020019081526020016000205490506000610cf282610e6a565b905080600b60008581526020019081526020016000206000828254610d179190612e7a565b92505081905550600182610d2b9190612eae565b600a6000858152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f943b00a67689342d89989c0bf7b5f4840b8c5a29e1383dc391a903626b3327c0600a60008681526020019081526020016000205485604051610d9d929190612456565b60405180910390a2505050565b600b6020528060005260406000206000915090505481565b606060018054610dd19061287c565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfd9061287c565b8015610e4a5780601f10610e1f57610100808354040283529160200191610e4a565b820191906000526020600020905b815481529060010190602001808311610e2d57829003601f168201915b5050505050905090565b610e66610e5f6112cb565b83836116f6565b5050565b6000683635c9adc5dea0000082610e819190612ee2565b90506000600190505b82811015610ec757683635c9adc5dea0000083610ea79190612ee2565b82610eb29190612eae565b91508080610ebf90612f24565b915050610e8a565b50919050565b60086020528060005260406000206000915054906101000a900460ff1681565b610efe610ef86112cb565b8361138c565b610f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3490612a43565b60405180910390fd5b610f4984848484611862565b50505050565b6000600c600084815260200190815260200160002082600a8110610f7657610f75612f6c565b5b602091828204019190069054906101000a900460ff16905092915050565b6060610f9f82611280565b6000600660008481526020019081526020016000208054610fbf9061287c565b80601f0160208091040260200160405190810160405280929190818152602001828054610feb9061287c565b80156110385780601f1061100d57610100808354040283529160200191611038565b820191906000526020600020905b81548152906001019060200180831161101b57829003601f168201915b5050505050905060006110496118be565b9050600081510361105e5781925050506110a1565b60008251111561109357808260405160200161107b929190612fd7565b604051602081830303815290604052925050506110a1565b61109c846118d5565b925050505b919050565b6110b0338361138c565b6110b957600080fd5b806009600084815260200190815260200160002090816110d99190612c7b565b503373ffffffffffffffffffffffffffffffffffffffff167f868c181b8c4c8c979246712f8d7022c869a58c0aeda1754222b1ab98a588e2c0600a60008581526020019081526020016000205484604051611135929190612456565b60405180910390a25050565b61114b338361138c565b61115457600080fd5b80600b600084815260200190815260200160002060008282546111779190612e7a565b925050819055505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6112898161193d565b6112c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bf90612d99565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661134683610b1b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061139883610b1b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113da57506113d98185611182565b5b8061141857508373ffffffffffffffffffffffffffffffffffffffff166114008461076a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661144182610b1b565b73ffffffffffffffffffffffffffffffffffffffff1614611497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148e9061306d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fd906130ff565b60405180910390fd5b6115118383836119a9565b61151c6000826112d3565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461156c9190612e7a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115c39190612eae565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116828383836119ae565b505050565b600081600001549050919050565b60606116bb8273ffffffffffffffffffffffffffffffffffffffff16601460ff166119b3565b9050919050565b6116dc828260405180602001604052806000815250611bef565b5050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175b9061316b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161185591906122f6565b60405180910390a3505050565b61186d848484611421565b61187984848484611c4a565b6118b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118af906131fd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606118e082611280565b60006118ea6118be565b9050600081511161190a5760405180602001604052806000815250611935565b8061191484611dd1565b604051602001611925929190612fd7565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6060600060028360026119c69190612ee2565b6119d09190612eae565b67ffffffffffffffff8111156119e9576119e8612562565b5b6040519080825280601f01601f191660200182016040528015611a1b5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611a5357611a52612f6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ab757611ab6612f6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611af79190612ee2565b611b019190612eae565b90505b6001811115611ba1577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611b4357611b42612f6c565b5b1a60f81b828281518110611b5a57611b59612f6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611b9a9061321d565b9050611b04565b5060008414611be5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdc90613292565b60405180910390fd5b8091505092915050565b611bf98383611f31565b611c066000848484611c4a565b611c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3c906131fd565b60405180910390fd5b505050565b6000611c6b8473ffffffffffffffffffffffffffffffffffffffff1661210a565b15611dc4578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c946112cb565b8786866040518563ffffffff1660e01b8152600401611cb69493929190613307565b6020604051808303816000875af1925050508015611cf257506040513d601f19601f82011682018060405250810190611cef9190613368565b60015b611d74573d8060008114611d22576040519150601f19603f3d011682016040523d82523d6000602084013e611d27565b606091505b506000815103611d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d63906131fd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611dc9565b600190505b949350505050565b606060008203611e18576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f2c565b600082905060005b60008214611e4a578080611e3390612f24565b915050600a82611e4391906133c4565b9150611e20565b60008167ffffffffffffffff811115611e6657611e65612562565b5b6040519080825280601f01601f191660200182016040528015611e985781602001600182028036833780820191505090505b5090505b60008514611f2557600182611eb19190612e7a565b9150600a85611ec091906133f5565b6030611ecc9190612eae565b60f81b818381518110611ee257611ee1612f6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f1e91906133c4565b9450611e9c565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9790613472565b60405180910390fd5b611fa98161193d565b15611fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe0906134de565b60405180910390fd5b611ff5600083836119a9565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120459190612eae565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612106600083836119ae565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61215481612141565b811461215f57600080fd5b50565b6000813590506121718161214b565b92915050565b60006020828403121561218d5761218c612137565b5b600061219b84828501612162565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121de5780820151818401526020810190506121c3565b60008484015250505050565b6000601f19601f8301169050919050565b6000612206826121a4565b61221081856121af565b93506122208185602086016121c0565b612229816121ea565b840191505092915050565b6000602082019050818103600083015261224e81846121fb565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61228b81612256565b811461229657600080fd5b50565b6000813590506122a881612282565b92915050565b6000602082840312156122c4576122c3612137565b5b60006122d284828501612299565b91505092915050565b60008115159050919050565b6122f0816122db565b82525050565b600060208201905061230b60008301846122e7565b92915050565b61231a81612141565b82525050565b60006020820190506123356000830184612311565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123668261233b565b9050919050565b6123768161235b565b82525050565b6000602082019050612391600083018461236d565b92915050565b6123a08161235b565b81146123ab57600080fd5b50565b6000813590506123bd81612397565b92915050565b600080604083850312156123da576123d9612137565b5b60006123e8858286016123ae565b92505060206123f985828601612162565b9150509250929050565b60008060006060848603121561241c5761241b612137565b5b600061242a868287016123ae565b935050602061243b868287016123ae565b925050604061244c86828701612162565b9150509250925092565b600060408201905061246b6000830185612311565b6124786020830184612311565b9392505050565b60006020828403121561249557612494612137565b5b60006124a3848285016123ae565b91505092915050565b600080604083850312156124c3576124c2612137565b5b60006124d185828601612162565b92505060206124e285828601612162565b9150509250929050565b6124f5816122db565b811461250057600080fd5b50565b600081359050612512816124ec565b92915050565b6000806040838503121561252f5761252e612137565b5b600061253d858286016123ae565b925050602061254e85828601612503565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61259a826121ea565b810181811067ffffffffffffffff821117156125b9576125b8612562565b5b80604052505050565b60006125cc61212d565b90506125d88282612591565b919050565b600067ffffffffffffffff8211156125f8576125f7612562565b5b612601826121ea565b9050602081019050919050565b82818337600083830152505050565b600061263061262b846125dd565b6125c2565b90508281526020810184848401111561264c5761264b61255d565b5b61265784828561260e565b509392505050565b600082601f83011261267457612673612558565b5b813561268484826020860161261d565b91505092915050565b600080600080608085870312156126a7576126a6612137565b5b60006126b5878288016123ae565b94505060206126c6878288016123ae565b93505060406126d787828801612162565b925050606085013567ffffffffffffffff8111156126f8576126f761213c565b5b6127048782880161265f565b91505092959194509250565b600067ffffffffffffffff82111561272b5761272a612562565b5b612734826121ea565b9050602081019050919050565b600061275461274f84612710565b6125c2565b9050828152602081018484840111156127705761276f61255d565b5b61277b84828561260e565b509392505050565b600082601f83011261279857612797612558565b5b81356127a8848260208601612741565b91505092915050565b600080604083850312156127c8576127c7612137565b5b60006127d685828601612162565b925050602083013567ffffffffffffffff8111156127f7576127f661213c565b5b61280385828601612783565b9150509250929050565b6000806040838503121561282457612823612137565b5b6000612832858286016123ae565b9250506020612843858286016123ae565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061289457607f821691505b6020821081036128a7576128a661284d565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006129096021836121af565b9150612914826128ad565b604082019050919050565b60006020820190508181036000830152612938816128fc565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061299b603e836121af565b91506129a68261293f565b604082019050919050565b600060208201905081810360008301526129ca8161298e565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612a2d602e836121af565b9150612a38826129d1565b604082019050919050565b60006020820190508181036000830152612a5c81612a20565b9050919050565b7f416c72656164792073756d6d6f6e656400000000000000000000000000000000600082015250565b6000612a996010836121af565b9150612aa482612a63565b602082019050919050565b60006020820190508181036000830152612ac881612a8c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612b317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612af4565b612b3b8683612af4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b78612b73612b6e84612141565b612b53565b612141565b9050919050565b6000819050919050565b612b9283612b5d565b612ba6612b9e82612b7f565b848454612b01565b825550505050565b600090565b612bbb612bae565b612bc6818484612b89565b505050565b5b81811015612bea57612bdf600082612bb3565b600181019050612bcc565b5050565b601f821115612c2f57612c0081612acf565b612c0984612ae4565b81016020851015612c18578190505b612c2c612c2485612ae4565b830182612bcb565b50505b505050565b600082821c905092915050565b6000612c5260001984600802612c34565b1980831691505092915050565b6000612c6b8383612c41565b9150826002028217905092915050565b612c84826121a4565b67ffffffffffffffff811115612c9d57612c9c612562565b5b612ca7825461287c565b612cb2828285612bee565b600060209050601f831160018114612ce55760008415612cd3578287015190505b612cdd8582612c5f565b865550612d45565b601f198416612cf386612acf565b60005b82811015612d1b57848901518255600182019150602085019450602081019050612cf6565b86831015612d385784890151612d34601f891682612c41565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612d836018836121af565b9150612d8e82612d4d565b602082019050919050565b60006020820190508181036000830152612db281612d76565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612e156029836121af565b9150612e2082612db9565b604082019050919050565b60006020820190508181036000830152612e4481612e08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e8582612141565b9150612e9083612141565b9250828203905081811115612ea857612ea7612e4b565b5b92915050565b6000612eb982612141565b9150612ec483612141565b9250828201905080821115612edc57612edb612e4b565b5b92915050565b6000612eed82612141565b9150612ef883612141565b9250828202612f0681612141565b91508282048414831517612f1d57612f1c612e4b565b5b5092915050565b6000612f2f82612141565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f6157612f60612e4b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000612fb1826121a4565b612fbb8185612f9b565b9350612fcb8185602086016121c0565b80840191505092915050565b6000612fe38285612fa6565b9150612fef8284612fa6565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006130576025836121af565b915061306282612ffb565b604082019050919050565b600060208201905081810360008301526130868161304a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006130e96024836121af565b91506130f48261308d565b604082019050919050565b60006020820190508181036000830152613118816130dc565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006131556019836121af565b91506131608261311f565b602082019050919050565b6000602082019050818103600083015261318481613148565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006131e76032836121af565b91506131f28261318b565b604082019050919050565b60006020820190508181036000830152613216816131da565b9050919050565b600061322882612141565b91506000820361323b5761323a612e4b565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061327c6020836121af565b915061328782613246565b602082019050919050565b600060208201905081810360008301526132ab8161326f565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006132d9826132b2565b6132e381856132bd565b93506132f38185602086016121c0565b6132fc816121ea565b840191505092915050565b600060808201905061331c600083018761236d565b613329602083018661236d565b6133366040830185612311565b818103606083015261334881846132ce565b905095945050505050565b60008151905061336281612282565b92915050565b60006020828403121561337e5761337d612137565b5b600061338c84828501613353565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133cf82612141565b91506133da83612141565b9250826133ea576133e9613395565b5b828204905092915050565b600061340082612141565b915061340b83612141565b92508261341b5761341a613395565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061345c6020836121af565b915061346782613426565b602082019050919050565b6000602082019050818103600083015261348b8161344f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006134c8601c836121af565b91506134d382613492565b602082019050919050565b600060208201905081810360008301526134f7816134bb565b905091905056fea26469706673582212202eded33f276ac374aeb4a66f79ad778a236ec77ae2e67a231f52d46fd17f39ed64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101725760003560e01c80638a24bcb7116100de578063adf448d811610097578063c87b56dd11610071578063c87b56dd146104a6578063e51c4ecc146104d6578063e58410bb146104f2578063e985e9c51461050e57610172565b8063adf448d81461042a578063b88d4fde1461045a578063c220bf341461047657610172565b80638a24bcb714610344578063902494481461037457806394b69ffa1461039057806395d89b41146103c0578063a22cb465146103de578063aca10be3146103fa57610172565b806323b872dd1161013057806323b872dd14610271578063363dd19e1461028d57806342842e0e146102975780634b871dfb146102b35780636352211e146102e457806370a082311461031457610172565b8062ad800c1461017757806301ffc9a7146101a757806305c58df2146101d757806306fdde0314610207578063081812fc14610225578063095ea7b314610255575b600080fd5b610191600480360381019061018c9190612177565b61053e565b60405161019e9190612234565b60405180910390f35b6101c160048036038101906101bc91906122ae565b6105de565b6040516101ce91906122f6565b60405180910390f35b6101f160048036038101906101ec9190612177565b6106c0565b6040516101fe9190612320565b60405180910390f35b61020f6106d8565b60405161021c9190612234565b60405180910390f35b61023f600480360381019061023a9190612177565b61076a565b60405161024c919061237c565b60405180910390f35b61026f600480360381019061026a91906123c3565b6107b0565b005b61028b60048036038101906102869190612403565b6108c7565b005b610295610927565b005b6102b160048036038101906102ac9190612403565b610ac7565b005b6102cd60048036038101906102c89190612177565b610ae7565b6040516102db929190612456565b60405180910390f35b6102fe60048036038101906102f99190612177565b610b1b565b60405161030b919061237c565b60405180910390f35b61032e6004803603810190610329919061247f565b610bcc565b60405161033b9190612320565b60405180910390f35b61035e600480360381019061035991906124ac565b610c83565b60405161036b91906122f6565b60405180910390f35b61038e60048036038101906103899190612177565b610cbc565b005b6103aa60048036038101906103a59190612177565b610daa565b6040516103b79190612320565b60405180910390f35b6103c8610dc2565b6040516103d59190612234565b60405180910390f35b6103f860048036038101906103f39190612518565b610e54565b005b610414600480360381019061040f9190612177565b610e6a565b6040516104219190612320565b60405180910390f35b610444600480360381019061043f919061247f565b610ecd565b60405161045191906122f6565b60405180910390f35b610474600480360381019061046f919061268d565b610eed565b005b610490600480360381019061048b91906124ac565b610f4f565b60405161049d91906122f6565b60405180910390f35b6104c060048036038101906104bb9190612177565b610f94565b6040516104cd9190612234565b60405180910390f35b6104f060048036038101906104eb91906127b1565b6110a6565b005b61050c600480360381019061050791906124ac565b611141565b005b6105286004803603810190610523919061280d565b611182565b60405161053591906122f6565b60405180910390f35b6009602052806000526040600020600091509050805461055d9061287c565b80601f01602080910402602001604051908101604052809291908181526020018280546105899061287c565b80156105d65780601f106105ab576101008083540402835291602001916105d6565b820191906000526020600020905b8154815290600101906020018083116105b957829003601f168201915b505050505081565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106a957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106b957506106b882611216565b5b9050919050565b600a6020528060005260406000206000915090505481565b6060600080546106e79061287c565b80601f01602080910402602001604051908101604052809291908181526020018280546107139061287c565b80156107605780601f1061073557610100808354040283529160200191610760565b820191906000526020600020905b81548152906001019060200180831161074357829003601f168201915b5050505050905090565b600061077582611280565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107bb82610b1b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361082b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108229061291f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661084a6112cb565b73ffffffffffffffffffffffffffffffffffffffff1614806108795750610878816108736112cb565b611182565b5b6108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108af906129b1565b60405180910390fd5b6108c283836112d3565b505050565b6108d86108d26112cb565b8261138c565b610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e90612a43565b60405180910390fd5b610922838383611421565b505050565b60001515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190612aaf565b60405180910390fd5b60006109c66007611687565b90506109d133611695565b6009600083815260200190815260200160002090816109f09190612c7b565b506001600a6000838152602001908152602001600020819055506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a6c33826116c2565b3373ffffffffffffffffffffffffffffffffffffffff167fbbb46266402c42849573c27abc27dd180e2b8ec8f33840ca8b0919227659e39982604051610ab29190612320565b60405180910390a2610ac460076116e0565b50565b610ae283838360405180602001604052806000815250610eed565b505050565b600080600b6000848152602001908152602001600020549150600a6000848152602001908152602001600020549050915091565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba90612d99565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3390612e2b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c60205281600052604060002081600a8110610c9f57600080fd5b60209182820401919006915091509054906101000a900460ff1681565b610cc6338261138c565b610ccf57600080fd5b6000600a60008381526020019081526020016000205490506000610cf282610e6a565b905080600b60008581526020019081526020016000206000828254610d179190612e7a565b92505081905550600182610d2b9190612eae565b600a6000858152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f943b00a67689342d89989c0bf7b5f4840b8c5a29e1383dc391a903626b3327c0600a60008681526020019081526020016000205485604051610d9d929190612456565b60405180910390a2505050565b600b6020528060005260406000206000915090505481565b606060018054610dd19061287c565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfd9061287c565b8015610e4a5780601f10610e1f57610100808354040283529160200191610e4a565b820191906000526020600020905b815481529060010190602001808311610e2d57829003601f168201915b5050505050905090565b610e66610e5f6112cb565b83836116f6565b5050565b6000683635c9adc5dea0000082610e819190612ee2565b90506000600190505b82811015610ec757683635c9adc5dea0000083610ea79190612ee2565b82610eb29190612eae565b91508080610ebf90612f24565b915050610e8a565b50919050565b60086020528060005260406000206000915054906101000a900460ff1681565b610efe610ef86112cb565b8361138c565b610f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3490612a43565b60405180910390fd5b610f4984848484611862565b50505050565b6000600c600084815260200190815260200160002082600a8110610f7657610f75612f6c565b5b602091828204019190069054906101000a900460ff16905092915050565b6060610f9f82611280565b6000600660008481526020019081526020016000208054610fbf9061287c565b80601f0160208091040260200160405190810160405280929190818152602001828054610feb9061287c565b80156110385780601f1061100d57610100808354040283529160200191611038565b820191906000526020600020905b81548152906001019060200180831161101b57829003601f168201915b5050505050905060006110496118be565b9050600081510361105e5781925050506110a1565b60008251111561109357808260405160200161107b929190612fd7565b604051602081830303815290604052925050506110a1565b61109c846118d5565b925050505b919050565b6110b0338361138c565b6110b957600080fd5b806009600084815260200190815260200160002090816110d99190612c7b565b503373ffffffffffffffffffffffffffffffffffffffff167f868c181b8c4c8c979246712f8d7022c869a58c0aeda1754222b1ab98a588e2c0600a60008581526020019081526020016000205484604051611135929190612456565b60405180910390a25050565b61114b338361138c565b61115457600080fd5b80600b600084815260200190815260200160002060008282546111779190612e7a565b925050819055505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6112898161193d565b6112c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bf90612d99565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661134683610b1b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061139883610b1b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113da57506113d98185611182565b5b8061141857508373ffffffffffffffffffffffffffffffffffffffff166114008461076a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661144182610b1b565b73ffffffffffffffffffffffffffffffffffffffff1614611497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148e9061306d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fd906130ff565b60405180910390fd5b6115118383836119a9565b61151c6000826112d3565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461156c9190612e7a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115c39190612eae565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116828383836119ae565b505050565b600081600001549050919050565b60606116bb8273ffffffffffffffffffffffffffffffffffffffff16601460ff166119b3565b9050919050565b6116dc828260405180602001604052806000815250611bef565b5050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175b9061316b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161185591906122f6565b60405180910390a3505050565b61186d848484611421565b61187984848484611c4a565b6118b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118af906131fd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606118e082611280565b60006118ea6118be565b9050600081511161190a5760405180602001604052806000815250611935565b8061191484611dd1565b604051602001611925929190612fd7565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6060600060028360026119c69190612ee2565b6119d09190612eae565b67ffffffffffffffff8111156119e9576119e8612562565b5b6040519080825280601f01601f191660200182016040528015611a1b5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611a5357611a52612f6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ab757611ab6612f6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611af79190612ee2565b611b019190612eae565b90505b6001811115611ba1577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611b4357611b42612f6c565b5b1a60f81b828281518110611b5a57611b59612f6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611b9a9061321d565b9050611b04565b5060008414611be5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdc90613292565b60405180910390fd5b8091505092915050565b611bf98383611f31565b611c066000848484611c4a565b611c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3c906131fd565b60405180910390fd5b505050565b6000611c6b8473ffffffffffffffffffffffffffffffffffffffff1661210a565b15611dc4578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c946112cb565b8786866040518563ffffffff1660e01b8152600401611cb69493929190613307565b6020604051808303816000875af1925050508015611cf257506040513d601f19601f82011682018060405250810190611cef9190613368565b60015b611d74573d8060008114611d22576040519150601f19603f3d011682016040523d82523d6000602084013e611d27565b606091505b506000815103611d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d63906131fd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611dc9565b600190505b949350505050565b606060008203611e18576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f2c565b600082905060005b60008214611e4a578080611e3390612f24565b915050600a82611e4391906133c4565b9150611e20565b60008167ffffffffffffffff811115611e6657611e65612562565b5b6040519080825280601f01601f191660200182016040528015611e985781602001600182028036833780820191505090505b5090505b60008514611f2557600182611eb19190612e7a565b9150600a85611ec091906133f5565b6030611ecc9190612eae565b60f81b818381518110611ee257611ee1612f6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f1e91906133c4565b9450611e9c565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9790613472565b60405180910390fd5b611fa98161193d565b15611fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe0906134de565b60405180910390fd5b611ff5600083836119a9565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120459190612eae565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612106600083836119ae565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61215481612141565b811461215f57600080fd5b50565b6000813590506121718161214b565b92915050565b60006020828403121561218d5761218c612137565b5b600061219b84828501612162565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121de5780820151818401526020810190506121c3565b60008484015250505050565b6000601f19601f8301169050919050565b6000612206826121a4565b61221081856121af565b93506122208185602086016121c0565b612229816121ea565b840191505092915050565b6000602082019050818103600083015261224e81846121fb565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61228b81612256565b811461229657600080fd5b50565b6000813590506122a881612282565b92915050565b6000602082840312156122c4576122c3612137565b5b60006122d284828501612299565b91505092915050565b60008115159050919050565b6122f0816122db565b82525050565b600060208201905061230b60008301846122e7565b92915050565b61231a81612141565b82525050565b60006020820190506123356000830184612311565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123668261233b565b9050919050565b6123768161235b565b82525050565b6000602082019050612391600083018461236d565b92915050565b6123a08161235b565b81146123ab57600080fd5b50565b6000813590506123bd81612397565b92915050565b600080604083850312156123da576123d9612137565b5b60006123e8858286016123ae565b92505060206123f985828601612162565b9150509250929050565b60008060006060848603121561241c5761241b612137565b5b600061242a868287016123ae565b935050602061243b868287016123ae565b925050604061244c86828701612162565b9150509250925092565b600060408201905061246b6000830185612311565b6124786020830184612311565b9392505050565b60006020828403121561249557612494612137565b5b60006124a3848285016123ae565b91505092915050565b600080604083850312156124c3576124c2612137565b5b60006124d185828601612162565b92505060206124e285828601612162565b9150509250929050565b6124f5816122db565b811461250057600080fd5b50565b600081359050612512816124ec565b92915050565b6000806040838503121561252f5761252e612137565b5b600061253d858286016123ae565b925050602061254e85828601612503565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61259a826121ea565b810181811067ffffffffffffffff821117156125b9576125b8612562565b5b80604052505050565b60006125cc61212d565b90506125d88282612591565b919050565b600067ffffffffffffffff8211156125f8576125f7612562565b5b612601826121ea565b9050602081019050919050565b82818337600083830152505050565b600061263061262b846125dd565b6125c2565b90508281526020810184848401111561264c5761264b61255d565b5b61265784828561260e565b509392505050565b600082601f83011261267457612673612558565b5b813561268484826020860161261d565b91505092915050565b600080600080608085870312156126a7576126a6612137565b5b60006126b5878288016123ae565b94505060206126c6878288016123ae565b93505060406126d787828801612162565b925050606085013567ffffffffffffffff8111156126f8576126f761213c565b5b6127048782880161265f565b91505092959194509250565b600067ffffffffffffffff82111561272b5761272a612562565b5b612734826121ea565b9050602081019050919050565b600061275461274f84612710565b6125c2565b9050828152602081018484840111156127705761276f61255d565b5b61277b84828561260e565b509392505050565b600082601f83011261279857612797612558565b5b81356127a8848260208601612741565b91505092915050565b600080604083850312156127c8576127c7612137565b5b60006127d685828601612162565b925050602083013567ffffffffffffffff8111156127f7576127f661213c565b5b61280385828601612783565b9150509250929050565b6000806040838503121561282457612823612137565b5b6000612832858286016123ae565b9250506020612843858286016123ae565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061289457607f821691505b6020821081036128a7576128a661284d565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006129096021836121af565b9150612914826128ad565b604082019050919050565b60006020820190508181036000830152612938816128fc565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061299b603e836121af565b91506129a68261293f565b604082019050919050565b600060208201905081810360008301526129ca8161298e565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612a2d602e836121af565b9150612a38826129d1565b604082019050919050565b60006020820190508181036000830152612a5c81612a20565b9050919050565b7f416c72656164792073756d6d6f6e656400000000000000000000000000000000600082015250565b6000612a996010836121af565b9150612aa482612a63565b602082019050919050565b60006020820190508181036000830152612ac881612a8c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612b317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612af4565b612b3b8683612af4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b78612b73612b6e84612141565b612b53565b612141565b9050919050565b6000819050919050565b612b9283612b5d565b612ba6612b9e82612b7f565b848454612b01565b825550505050565b600090565b612bbb612bae565b612bc6818484612b89565b505050565b5b81811015612bea57612bdf600082612bb3565b600181019050612bcc565b5050565b601f821115612c2f57612c0081612acf565b612c0984612ae4565b81016020851015612c18578190505b612c2c612c2485612ae4565b830182612bcb565b50505b505050565b600082821c905092915050565b6000612c5260001984600802612c34565b1980831691505092915050565b6000612c6b8383612c41565b9150826002028217905092915050565b612c84826121a4565b67ffffffffffffffff811115612c9d57612c9c612562565b5b612ca7825461287c565b612cb2828285612bee565b600060209050601f831160018114612ce55760008415612cd3578287015190505b612cdd8582612c5f565b865550612d45565b601f198416612cf386612acf565b60005b82811015612d1b57848901518255600182019150602085019450602081019050612cf6565b86831015612d385784890151612d34601f891682612c41565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612d836018836121af565b9150612d8e82612d4d565b602082019050919050565b60006020820190508181036000830152612db281612d76565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612e156029836121af565b9150612e2082612db9565b604082019050919050565b60006020820190508181036000830152612e4481612e08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e8582612141565b9150612e9083612141565b9250828203905081811115612ea857612ea7612e4b565b5b92915050565b6000612eb982612141565b9150612ec483612141565b9250828201905080821115612edc57612edb612e4b565b5b92915050565b6000612eed82612141565b9150612ef883612141565b9250828202612f0681612141565b91508282048414831517612f1d57612f1c612e4b565b5b5092915050565b6000612f2f82612141565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f6157612f60612e4b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000612fb1826121a4565b612fbb8185612f9b565b9350612fcb8185602086016121c0565b80840191505092915050565b6000612fe38285612fa6565b9150612fef8284612fa6565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006130576025836121af565b915061306282612ffb565b604082019050919050565b600060208201905081810360008301526130868161304a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006130e96024836121af565b91506130f48261308d565b604082019050919050565b60006020820190508181036000830152613118816130dc565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006131556019836121af565b91506131608261311f565b602082019050919050565b6000602082019050818103600083015261318481613148565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006131e76032836121af565b91506131f28261318b565b604082019050919050565b60006020820190508181036000830152613216816131da565b9050919050565b600061322882612141565b91506000820361323b5761323a612e4b565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061327c6020836121af565b915061328782613246565b602082019050919050565b600060208201905081810360008301526132ab8161326f565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006132d9826132b2565b6132e381856132bd565b93506132f38185602086016121c0565b6132fc816121ea565b840191505092915050565b600060808201905061331c600083018761236d565b613329602083018661236d565b6133366040830185612311565b818103606083015261334881846132ce565b905095945050505050565b60008151905061336281612282565b92915050565b60006020828403121561337e5761337d612137565b5b600061338c84828501613353565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133cf82612141565b91506133da83612141565b9250826133ea576133e9613395565b5b828204905092915050565b600061340082612141565b915061340b83612141565b92508261341b5761341a613395565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061345c6020836121af565b915061346782613426565b602082019050919050565b6000602082019050818103600083015261348b8161344f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006134c8601c836121af565b91506134d382613492565b602082019050919050565b600060208201905081810360008301526134f7816134bb565b905091905056fea26469706673582212202eded33f276ac374aeb4a66f79ad778a236ec77ae2e67a231f52d46fd17f39ed64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/core/Character.sol:Character",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/core/Character.sol:Character",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/core/Character.sol:Character",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/core/Character.sol:Character",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/core/Character.sol:Character",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/core/Character.sol:Character",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1013,
        "contract": "contracts/core/Character.sol:Character",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4608,
        "contract": "contracts/core/Character.sol:Character",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1475_storage"
      },
      {
        "astId": 4612,
        "contract": "contracts/core/Character.sol:Character",
        "label": "minted_address",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4616,
        "contract": "contracts/core/Character.sol:Character",
        "label": "name",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4620,
        "contract": "contracts/core/Character.sol:Character",
        "label": "level",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4624,
        "contract": "contracts/core/Character.sol:Character",
        "label": "xp",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4630,
        "contract": "contracts/core/Character.sol:Character",
        "label": "events",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_bool)10_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)10_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_bool)10_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool[10])",
        "numberOfBytes": "32",
        "value": "t_array(t_bool)10_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1475_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1474,
            "contract": "contracts/core/Character.sol:Character",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}