{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_nftCollection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "charAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "availableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hunter",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coin",
      "outputs": [
        {
          "internalType": "contract Coin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Staking.StakedToken[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hunter",
      "outputs": [
        {
          "internalType": "contract Character",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftCollection",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeOfLastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unclaimedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb5d03cd5cf2475d23954a927142ade04df3fdbb10a69fba86c51d1708cfd027",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1712752",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa4271c521b8c69aa72422571d98f34ae3539c233f8f7fa3e9e19910f99d81999",
    "transactionHash": "0xfb5d03cd5cf2475d23954a927142ade04df3fdbb10a69fba86c51d1708cfd027",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1712752",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "e9e91761ad028a589f1834621c860afb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nftCollection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"availableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hunter\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"contract Coin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.StakedToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hunter\",\"outputs\":[{\"internalType\":\"contract Character\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCollection\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/core/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ninterface Coin {\\r\\n    function claim(uint summoner) external;\\r\\n}\\r\\n\\r\\ninterface Character {\\r\\n    function level(uint) external view returns (uint);\\r\\n\\r\\n    function getApproved(uint) external view returns (address);\\r\\n\\r\\n    function ownerOf(uint) external view returns (address);\\r\\n}\\r\\n\\r\\ncontract Staking is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Interfaces for ERC20 and ERC721\\r\\n    // IERC20 public immutable rewardsToken;\\r\\n    IERC721 public immutable nftCollection;\\r\\n    Coin public immutable coin;\\r\\n    Character public immutable hunter;\\r\\n\\r\\n    // Constructor function to set the rewards token and the NFT collection addresses\\r\\n    constructor(\\r\\n        IERC721 _nftCollection,\\r\\n        address coinAddr,\\r\\n        address charAddr\\r\\n    ) {\\r\\n        nftCollection = _nftCollection;\\r\\n        // rewardsToken = _rewardsToken;\\r\\n        coin = Coin(coinAddr);\\r\\n        hunter = Character(charAddr);\\r\\n    }\\r\\n\\r\\n    struct StakedToken {\\r\\n        address staker;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    // Staker info\\r\\n    struct Staker {\\r\\n        // Amount of tokens staked by the staker\\r\\n        uint256 amountStaked;\\r\\n        // Staked token ids\\r\\n        StakedToken[] stakedTokens;\\r\\n        // Last time of the rewards were calculated for this user\\r\\n        uint256 timeOfLastUpdate;\\r\\n        // Calculated, but unclaimed rewards for the User. The rewards are\\r\\n        // calculated each time the user writes to the Smart Contract\\r\\n        uint256 unclaimedRewards;\\r\\n    }\\r\\n\\r\\n    // Rewards per hour per token deposited in wei.\\r\\n    uint256 private rewardsPerHour = 100000;\\r\\n\\r\\n    // Mapping of User Address to Staker info\\r\\n    mapping(address => Staker) public stakers;\\r\\n\\r\\n    // Mapping of Token Id to staker. Made for the SC to remeber\\r\\n    // who to send back the ERC721 Token to.\\r\\n    mapping(uint256 => address) public stakerAddress;\\r\\n\\r\\n    // If address already has ERC721 Token/s staked, calculate the rewards.\\r\\n    // Increment the amountStaked and map msg.sender to the Token Id of the staked\\r\\n    // Token to later send back on withdrawal. Finally give timeOfLastUpdate the\\r\\n    // value of now.\\r\\n    function stake(uint256 _tokenId) external nonReentrant {\\r\\n        // If wallet has tokens staked, calculate the rewards before adding the new token\\r\\n        if (stakers[msg.sender].amountStaked > 0) {\\r\\n            uint256 rewards = calculateRewards(msg.sender);\\r\\n            stakers[msg.sender].unclaimedRewards += rewards;\\r\\n        }\\r\\n\\r\\n        // Wallet must own the token they are trying to stake\\r\\n        require(\\r\\n            nftCollection.ownerOf(_tokenId) == msg.sender,\\r\\n            \\\"You don't own this token!\\\"\\r\\n        );\\r\\n\\r\\n        // Transfer the token from the wallet to the Smart contract\\r\\n        nftCollection.transferFrom(msg.sender, address(this), _tokenId);\\r\\n\\r\\n        // Create StakedToken\\r\\n        StakedToken memory stakedToken = StakedToken(msg.sender, _tokenId);\\r\\n\\r\\n        // Add the token to the stakedTokens array\\r\\n        stakers[msg.sender].stakedTokens.push(stakedToken);\\r\\n\\r\\n        // Increment the amount staked for this wallet\\r\\n        stakers[msg.sender].amountStaked++;\\r\\n\\r\\n        // Update the mapping of the tokenId to the staker's address\\r\\n        stakerAddress[_tokenId] = msg.sender;\\r\\n\\r\\n        // Update the timeOfLastUpdate for the staker\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Check if user has any ERC721 Tokens Staked and if they tried to withdraw,\\r\\n    // calculate the rewards and store them in the unclaimedRewards\\r\\n    // decrement the amountStaked of the user and transfer the ERC721 token back to them\\r\\n    function withdraw(uint256 _tokenId) external nonReentrant {\\r\\n        // Make sure the user has at least one token staked before withdrawing\\r\\n        require(\\r\\n            stakers[msg.sender].amountStaked > 0,\\r\\n            \\\"You have no tokens staked\\\"\\r\\n        );\\r\\n\\r\\n        // Wallet must own the token they are trying to withdraw\\r\\n        require(\\r\\n            stakerAddress[_tokenId] == msg.sender,\\r\\n            \\\"You don't own this token!\\\"\\r\\n        );\\r\\n\\r\\n        // Update the rewards for this user, as the amount of rewards decreases with less tokens.\\r\\n        uint256 rewards = calculateRewards(msg.sender);\\r\\n        stakers[msg.sender].unclaimedRewards += rewards;\\r\\n\\r\\n        // Find the index of this token id in the stakedTokens array\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < stakers[msg.sender].stakedTokens.length; i++) {\\r\\n            if (\\r\\n                stakers[msg.sender].stakedTokens[i].tokenId == _tokenId &&\\r\\n                stakers[msg.sender].stakedTokens[i].staker != address(0)\\r\\n            ) {\\r\\n                index = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Set this token's .staker to be address 0 to mark it as no longer staked\\r\\n        stakers[msg.sender].stakedTokens[index].staker = address(0);\\r\\n\\r\\n        // Decrement the amount staked for this wallet\\r\\n        stakers[msg.sender].amountStaked--;\\r\\n\\r\\n        // Update the mapping of the tokenId to the be address(0) to indicate that the token is no longer staked\\r\\n        stakerAddress[_tokenId] = address(0);\\r\\n\\r\\n        // Transfer the token back to the withdrawer\\r\\n        nftCollection.transferFrom(address(this), msg.sender, _tokenId);\\r\\n\\r\\n        // Update the timeOfLastUpdate for the withdrawer\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Calculate rewards for the msg.sender, check if there are any rewards\\r\\n    // claim, set unclaimedRewards to 0 and transfer the ERC20 Reward token\\r\\n    // to the user.\\r\\n    function claimRewards(uint256 _hunter) external {\\r\\n        require(_isApprovedOrOwner(_hunter));\\r\\n        uint256 rewards = calculateRewards(msg.sender) +\\r\\n            stakers[msg.sender].unclaimedRewards;\\r\\n        require(rewards > 0, \\\"You have no rewards to claim\\\");\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        stakers[msg.sender].unclaimedRewards = 0;\\r\\n        coin.claim(_hunter);\\r\\n        // rewardsToken.safeTransfer(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    //////////\\r\\n    // View //\\r\\n    //////////\\r\\n\\r\\n    function availableRewards(address _staker) public view returns (uint256) {\\r\\n        uint256 rewards = calculateRewards(_staker) +\\r\\n            stakers[_staker].unclaimedRewards;\\r\\n        return rewards;\\r\\n    }\\r\\n\\r\\n    function getStakedTokens(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (StakedToken[] memory)\\r\\n    {\\r\\n        // Check if we know this user\\r\\n        if (stakers[_user].amountStaked > 0) {\\r\\n            // Return all the tokens in the stakedToken Array for this user that are not -1\\r\\n            StakedToken[] memory _stakedTokens = new StakedToken[](\\r\\n                stakers[_user].amountStaked\\r\\n            );\\r\\n            uint256 _index = 0;\\r\\n\\r\\n            for (uint256 j = 0; j < stakers[_user].stakedTokens.length; j++) {\\r\\n                if (stakers[_user].stakedTokens[j].staker != (address(0))) {\\r\\n                    _stakedTokens[_index] = stakers[_user].stakedTokens[j];\\r\\n                    _index++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return _stakedTokens;\\r\\n        }\\r\\n        // Otherwise, return empty array\\r\\n        else {\\r\\n            return new StakedToken[](0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /////////////\\r\\n    // Internal//\\r\\n    /////////////\\r\\n\\r\\n    // Calculate rewards for param _staker by calculating the time passed\\r\\n    // since last update in hours and mulitplying it to ERC721 Tokens Staked\\r\\n    // and rewardsPerHour.\\r\\n    function calculateRewards(address _staker)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 _rewards)\\r\\n    {\\r\\n        return (((\\r\\n            ((block.timestamp - stakers[_staker].timeOfLastUpdate) *\\r\\n                stakers[_staker].amountStaked)\\r\\n        ) * rewardsPerHour) / 3600);\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(uint _hunter) internal view returns (bool) {\\r\\n        return\\r\\n            hunter.getApproved(_hunter) == msg.sender ||\\r\\n            hunter.ownerOf(_hunter) == msg.sender;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7087ccba392af523e1705ec180572fbf45aac48ae7486e3ddea872e4ab5f626\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052620186a06001553480156200001857600080fd5b5060405162001f7c38038062001f7c83398181016040528101906200003e91906200019a565b60016000819055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050505050620001f6565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011d82620000f0565b9050919050565b6000620001318262000110565b9050919050565b620001438162000124565b81146200014f57600080fd5b50565b600081519050620001638162000138565b92915050565b620001748162000110565b81146200018057600080fd5b50565b600081519050620001948162000169565b92915050565b600080600060608486031215620001b657620001b5620000eb565b5b6000620001c68682870162000152565b9350506020620001d98682870162000183565b9250506040620001ec8682870162000183565b9150509250925092565b60805160a05160c051611d2c6200025060003960008181610406015281816112b3015261138101526000818161035301526103e20152600081816108eb01528181610d3401528181610ecc0152610fbc0152611d2c6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636588103b116100665780636588103b146101475780639168ae72146101655780639406704514610197578063a694fc3a146101c7578063f854a27f146101e35761009e565b80630962ef79146100a357806311df9995146100bf5780631602f7b0146100dd5780632e1a7d4d146100fb57806363c28db114610117575b600080fd5b6100bd60048036038101906100b89190611561565b610213565b005b6100c76103e0565b6040516100d4919061160d565b60405180910390f35b6100e5610404565b6040516100f29190611649565b60405180910390f35b61011560048036038101906101109190611561565b610428565b005b610131600480360381019061012c91906116a2565b6109cc565b60405161013e91906117cb565b60405180910390f35b61014f610d32565b60405161015c919061180e565b60405180910390f35b61017f600480360381019061017a91906116a2565b610d56565b60405161018e93929190611838565b60405180910390f35b6101b160048036038101906101ac9190611561565b610d80565b6040516101be919061187e565b60405180910390f35b6101e160048036038101906101dc9190611561565b610db3565b005b6101fd60048036038101906101f891906116a2565b611234565b60405161020a9190611899565b60405180910390f35b61021c81611298565b61022557600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015461027333611438565b61027d91906118e3565b9050600081116102c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b990611974565b60405180910390fd5b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663379607f5836040518263ffffffff1660e01b81526004016103aa9190611899565b600060405180830381600087803b1580156103c457600080fd5b505af11580156103d8573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000540361046d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610464906119e0565b60405180910390fd5b60026000819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f190611a4c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461059b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059290611ab8565b60405180910390fd5b60006105a633611438565b905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008282546105fa91906118e3565b925050819055506000805b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805490508110156107985783600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010182815481106106a7576106a6611ad8565b5b9060005260206000209060020201600101541480156107785750600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101828154811061072d5761072c611ad8565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561078557809150610798565b808061079090611b07565b915050610605565b506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010182815481106107ef576107ee611ad8565b5b906000526020600020906002020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600081548092919061089190611b4f565b919050555060006003600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3033866040518463ffffffff1660e01b815260040161094693929190611b78565b600060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b5050505042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505050600160008190555050565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610cd5576000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015467ffffffffffffffff811115610a7757610a76611baf565b5b604051908082528060200260200182016040528015610ab057816020015b610a9d6114f6565b815260200190600190039081610a955790505b5090506000805b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180549050811015610cca57600073ffffffffffffffffffffffffffffffffffffffff16600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018281548110610b7057610b6f611ad8565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cb757600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018181548110610c1157610c10611ad8565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050838381518110610c9d57610c9c611ad8565b5b60200260200101819052508180610cb390611b07565b9250505b8080610cc290611b07565b915050610ab7565b508192505050610d2d565b600067ffffffffffffffff811115610cf057610cef611baf565b5b604051908082528060200260200182016040528015610d2957816020015b610d166114f6565b815260200190600190039081610d0e5790505b5090505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020528060005260406000206000915090508060000154908060020154908060030154905083565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260005403610df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610def906119e0565b60405180910390fd5b60026000819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610eb3576000610e5633611438565b905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610eaa91906118e3565b92505081905550505b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610f239190611899565b602060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f649190611bf3565b73ffffffffffffffffffffffffffffffffffffffff1614610fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb190611ab8565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161101793929190611b78565b600060405180830381600087803b15801561103157600080fd5b505af1158015611045573d6000803e3d6000fd5b50505050600060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152509050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600081548092919061118a90611b07565b9190505550336003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050600160008190555050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015461128384611438565b61128d91906118e3565b905080915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b815260040161130a9190611899565b602060405180830381865afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b9190611bf3565b73ffffffffffffffffffffffffffffffffffffffff16148061143157503373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016113d89190611899565b602060405180830381865afa1580156113f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114199190611bf3565b73ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b6000610e10600154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426114d19190611c20565b6114db9190611c54565b6114e59190611c54565b6114ef9190611cc5565b9050919050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b6000819050919050565b61153e8161152b565b811461154957600080fd5b50565b60008135905061155b81611535565b92915050565b60006020828403121561157757611576611526565b5b60006115858482850161154c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115d36115ce6115c98461158e565b6115ae565b61158e565b9050919050565b60006115e5826115b8565b9050919050565b60006115f7826115da565b9050919050565b611607816115ec565b82525050565b600060208201905061162260008301846115fe565b92915050565b6000611633826115da565b9050919050565b61164381611628565b82525050565b600060208201905061165e600083018461163a565b92915050565b600061166f8261158e565b9050919050565b61167f81611664565b811461168a57600080fd5b50565b60008135905061169c81611676565b92915050565b6000602082840312156116b8576116b7611526565b5b60006116c68482850161168d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61170481611664565b82525050565b6117138161152b565b82525050565b60408201600082015161172f60008501826116fb565b506020820151611742602085018261170a565b50505050565b60006117548383611719565b60408301905092915050565b6000602082019050919050565b6000611778826116cf565b61178281856116da565b935061178d836116eb565b8060005b838110156117be5781516117a58882611748565b97506117b083611760565b925050600181019050611791565b5085935050505092915050565b600060208201905081810360008301526117e5818461176d565b905092915050565b60006117f8826115da565b9050919050565b611808816117ed565b82525050565b600060208201905061182360008301846117ff565b92915050565b6118328161152b565b82525050565b600060608201905061184d6000830186611829565b61185a6020830185611829565b6118676040830184611829565b949350505050565b61187881611664565b82525050565b6000602082019050611893600083018461186f565b92915050565b60006020820190506118ae6000830184611829565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118ee8261152b565b91506118f98361152b565b9250828201905080821115611911576119106118b4565b5b92915050565b600082825260208201905092915050565b7f596f752068617665206e6f207265776172647320746f20636c61696d00000000600082015250565b600061195e601c83611917565b915061196982611928565b602082019050919050565b6000602082019050818103600083015261198d81611951565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006119ca601f83611917565b91506119d582611994565b602082019050919050565b600060208201905081810360008301526119f9816119bd565b9050919050565b7f596f752068617665206e6f20746f6b656e73207374616b656400000000000000600082015250565b6000611a36601983611917565b9150611a4182611a00565b602082019050919050565b60006020820190508181036000830152611a6581611a29565b9050919050565b7f596f7520646f6e2774206f776e207468697320746f6b656e2100000000000000600082015250565b6000611aa2601983611917565b9150611aad82611a6c565b602082019050919050565b60006020820190508181036000830152611ad181611a95565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611b128261152b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b4457611b436118b4565b5b600182019050919050565b6000611b5a8261152b565b915060008203611b6d57611b6c6118b4565b5b600182039050919050565b6000606082019050611b8d600083018661186f565b611b9a602083018561186f565b611ba76040830184611829565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050611bed81611676565b92915050565b600060208284031215611c0957611c08611526565b5b6000611c1784828501611bde565b91505092915050565b6000611c2b8261152b565b9150611c368361152b565b9250828203905081811115611c4e57611c4d6118b4565b5b92915050565b6000611c5f8261152b565b9150611c6a8361152b565b9250828202611c788161152b565b91508282048414831517611c8f57611c8e6118b4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611cd08261152b565b9150611cdb8361152b565b925082611ceb57611cea611c96565b5b82820490509291505056fea26469706673582212209e18fb9063d07464eec01d70c6f1e154ad555d3db110a82b423f2ee2fe33aa9964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80636588103b116100665780636588103b146101475780639168ae72146101655780639406704514610197578063a694fc3a146101c7578063f854a27f146101e35761009e565b80630962ef79146100a357806311df9995146100bf5780631602f7b0146100dd5780632e1a7d4d146100fb57806363c28db114610117575b600080fd5b6100bd60048036038101906100b89190611561565b610213565b005b6100c76103e0565b6040516100d4919061160d565b60405180910390f35b6100e5610404565b6040516100f29190611649565b60405180910390f35b61011560048036038101906101109190611561565b610428565b005b610131600480360381019061012c91906116a2565b6109cc565b60405161013e91906117cb565b60405180910390f35b61014f610d32565b60405161015c919061180e565b60405180910390f35b61017f600480360381019061017a91906116a2565b610d56565b60405161018e93929190611838565b60405180910390f35b6101b160048036038101906101ac9190611561565b610d80565b6040516101be919061187e565b60405180910390f35b6101e160048036038101906101dc9190611561565b610db3565b005b6101fd60048036038101906101f891906116a2565b611234565b60405161020a9190611899565b60405180910390f35b61021c81611298565b61022557600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015461027333611438565b61027d91906118e3565b9050600081116102c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b990611974565b60405180910390fd5b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663379607f5836040518263ffffffff1660e01b81526004016103aa9190611899565b600060405180830381600087803b1580156103c457600080fd5b505af11580156103d8573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000540361046d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610464906119e0565b60405180910390fd5b60026000819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f190611a4c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461059b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059290611ab8565b60405180910390fd5b60006105a633611438565b905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008282546105fa91906118e3565b925050819055506000805b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805490508110156107985783600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010182815481106106a7576106a6611ad8565b5b9060005260206000209060020201600101541480156107785750600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101828154811061072d5761072c611ad8565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561078557809150610798565b808061079090611b07565b915050610605565b506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010182815481106107ef576107ee611ad8565b5b906000526020600020906002020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600081548092919061089190611b4f565b919050555060006003600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3033866040518463ffffffff1660e01b815260040161094693929190611b78565b600060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b5050505042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505050600160008190555050565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610cd5576000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015467ffffffffffffffff811115610a7757610a76611baf565b5b604051908082528060200260200182016040528015610ab057816020015b610a9d6114f6565b815260200190600190039081610a955790505b5090506000805b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180549050811015610cca57600073ffffffffffffffffffffffffffffffffffffffff16600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018281548110610b7057610b6f611ad8565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cb757600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018181548110610c1157610c10611ad8565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050838381518110610c9d57610c9c611ad8565b5b60200260200101819052508180610cb390611b07565b9250505b8080610cc290611b07565b915050610ab7565b508192505050610d2d565b600067ffffffffffffffff811115610cf057610cef611baf565b5b604051908082528060200260200182016040528015610d2957816020015b610d166114f6565b815260200190600190039081610d0e5790505b5090505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020528060005260406000206000915090508060000154908060020154908060030154905083565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260005403610df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610def906119e0565b60405180910390fd5b60026000819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610eb3576000610e5633611438565b905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610eaa91906118e3565b92505081905550505b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610f239190611899565b602060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f649190611bf3565b73ffffffffffffffffffffffffffffffffffffffff1614610fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb190611ab8565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161101793929190611b78565b600060405180830381600087803b15801561103157600080fd5b505af1158015611045573d6000803e3d6000fd5b50505050600060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152509050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600081548092919061118a90611b07565b9190505550336003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050600160008190555050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015461128384611438565b61128d91906118e3565b905080915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b815260040161130a9190611899565b602060405180830381865afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b9190611bf3565b73ffffffffffffffffffffffffffffffffffffffff16148061143157503373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016113d89190611899565b602060405180830381865afa1580156113f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114199190611bf3565b73ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b6000610e10600154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426114d19190611c20565b6114db9190611c54565b6114e59190611c54565b6114ef9190611cc5565b9050919050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b6000819050919050565b61153e8161152b565b811461154957600080fd5b50565b60008135905061155b81611535565b92915050565b60006020828403121561157757611576611526565b5b60006115858482850161154c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115d36115ce6115c98461158e565b6115ae565b61158e565b9050919050565b60006115e5826115b8565b9050919050565b60006115f7826115da565b9050919050565b611607816115ec565b82525050565b600060208201905061162260008301846115fe565b92915050565b6000611633826115da565b9050919050565b61164381611628565b82525050565b600060208201905061165e600083018461163a565b92915050565b600061166f8261158e565b9050919050565b61167f81611664565b811461168a57600080fd5b50565b60008135905061169c81611676565b92915050565b6000602082840312156116b8576116b7611526565b5b60006116c68482850161168d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61170481611664565b82525050565b6117138161152b565b82525050565b60408201600082015161172f60008501826116fb565b506020820151611742602085018261170a565b50505050565b60006117548383611719565b60408301905092915050565b6000602082019050919050565b6000611778826116cf565b61178281856116da565b935061178d836116eb565b8060005b838110156117be5781516117a58882611748565b97506117b083611760565b925050600181019050611791565b5085935050505092915050565b600060208201905081810360008301526117e5818461176d565b905092915050565b60006117f8826115da565b9050919050565b611808816117ed565b82525050565b600060208201905061182360008301846117ff565b92915050565b6118328161152b565b82525050565b600060608201905061184d6000830186611829565b61185a6020830185611829565b6118676040830184611829565b949350505050565b61187881611664565b82525050565b6000602082019050611893600083018461186f565b92915050565b60006020820190506118ae6000830184611829565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118ee8261152b565b91506118f98361152b565b9250828201905080821115611911576119106118b4565b5b92915050565b600082825260208201905092915050565b7f596f752068617665206e6f207265776172647320746f20636c61696d00000000600082015250565b600061195e601c83611917565b915061196982611928565b602082019050919050565b6000602082019050818103600083015261198d81611951565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006119ca601f83611917565b91506119d582611994565b602082019050919050565b600060208201905081810360008301526119f9816119bd565b9050919050565b7f596f752068617665206e6f20746f6b656e73207374616b656400000000000000600082015250565b6000611a36601983611917565b9150611a4182611a00565b602082019050919050565b60006020820190508181036000830152611a6581611a29565b9050919050565b7f596f7520646f6e2774206f776e207468697320746f6b656e2100000000000000600082015250565b6000611aa2601983611917565b9150611aad82611a6c565b602082019050919050565b60006020820190508181036000830152611ad181611a95565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611b128261152b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b4457611b436118b4565b5b600182019050919050565b6000611b5a8261152b565b915060008203611b6d57611b6c6118b4565b5b600182039050919050565b6000606082019050611b8d600083018661186f565b611b9a602083018561186f565b611ba76040830184611829565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050611bed81611676565b92915050565b600060208284031215611c0957611c08611526565b5b6000611c1784828501611bde565b91505092915050565b6000611c2b8261152b565b9150611c368361152b565b9250828203905081811115611c4e57611c4d6118b4565b5b92915050565b6000611c5f8261152b565b9150611c6a8361152b565b9250828202611c788161152b565b91508282048414831517611c8f57611c8e6118b4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611cd08261152b565b9150611cdb8361152b565b925082611ceb57611cea611c96565b5b82820490509291505056fea26469706673582212209e18fb9063d07464eec01d70c6f1e154ad555d3db110a82b423f2ee2fe33aa9964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 403,
        "contract": "contracts/core/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4779,
        "contract": "contracts/core/Staking.sol:Staking",
        "label": "rewardsPerHour",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4784,
        "contract": "contracts/core/Staking.sol:Staking",
        "label": "stakers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Staker)4776_storage)"
      },
      {
        "astId": 4788,
        "contract": "contracts/core/Staking.sol:Staking",
        "label": "stakerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakedToken)4765_storage)dyn_storage": {
        "base": "t_struct(StakedToken)4765_storage",
        "encoding": "dynamic_array",
        "label": "struct Staking.StakedToken[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Staker)4776_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)4776_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(StakedToken)4765_storage": {
        "encoding": "inplace",
        "label": "struct Staking.StakedToken",
        "members": [
          {
            "astId": 4762,
            "contract": "contracts/core/Staking.sol:Staking",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4764,
            "contract": "contracts/core/Staking.sol:Staking",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Staker)4776_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Staker",
        "members": [
          {
            "astId": 4767,
            "contract": "contracts/core/Staking.sol:Staking",
            "label": "amountStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4771,
            "contract": "contracts/core/Staking.sol:Staking",
            "label": "stakedTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(StakedToken)4765_storage)dyn_storage"
          },
          {
            "astId": 4773,
            "contract": "contracts/core/Staking.sol:Staking",
            "label": "timeOfLastUpdate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4775,
            "contract": "contracts/core/Staking.sol:Staking",
            "label": "unclaimedRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}